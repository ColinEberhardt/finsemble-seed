/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/preloads/zoom.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/preloads/zoom.js":
/*!******************************!*\
  !*** ./src/preloads/zoom.js ***!
  \******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n\tFinsemble Zoom preload, which adds support for:\n\t- Zoom hotkeys (Ctrl +, Ctrl -, Ctrl 0, Ctrl Mousewheel),\n\t- A Chrome style popup showing the current zoom level,\n\t- Global zoom configuration settings:\n\t  - finsemble.Window Manager.zoom.timeout: how long to display the zoom popup for (default 3000ms)\n\t  - finsemble.Window Manager.zoom.step: Zoom step size (default 0.1)\n\t  - finsemble.Window Manager.zoom.min: Minimum zoom level (default 0.2)\n\t  - finsemble.Window Manager.zoom.max Maximum zoom level (default 5)\n\t- Zoom level being preserved in window state/workspaces\n\t- Default zoom level config with-in the component configuration at:\n\t  `foreign.components.['Window Manager'].zoomDefault`\n*/\n// This global will contain our current zoom level\nwindow.fsblZoomLevel = 1; // Global variables hold our zoom heuristics. We set the defaults here but they can be overridden\n// with the config finsemble.Window Manager.zoom\n\nwindow.zoomTimeout = 3000;\nwindow.zoomStep = 0.1;\nwindow.zoomMin = 0.2;\nwindow.zoomMax = 5; // This gets flipped to false once the initial zoom is set.\n// We use this flag to prevent the zoom level pop up from displaying when the component is first loaded.\n\nwindow.settingInitialZoom = true;\n/**\n * Show a pop up control that displays the current zoom level and allows users to manipulate it with the mouse.\n * @param {int} pct\n */\n\nconst showPopup = pct => {\n  const popup = document.querySelector(\"#zoom-popup\");\n\n  if (popup) {\n    popup.style.zoom = 1;\n    const span = document.querySelector(\"#zoom-popup-text\");\n    span.innerHTML = `${Math.floor(pct * 100)}%`;\n    popup.style.display = \"block\";\n\n    if (window.timerHandle) {\n      // Clear timer to reset hide timeout\n      clearTimeout(window.timerHandle);\n      window.timerHandle = null;\n    }\n\n    window.timerHandle = setTimeout(() => popup.style.display = \"none\", window.zoomTimeout);\n  }\n};\n/**\n * Sets the zoom by setting the CSS \"zoom\" value on the body.\n *\n * It sets an opposing zoom on the Finsemble header in order that it maintains its size\n * @param {Number} pct The zoom level (1 is 100%)\n */\n\n\nconst setZoom = pct => {\n  // enforce min/max zoom\n  if (pct < window.zoomMin) {\n    pct = window.zoomMin;\n  } else if (pct > window.zoomMax) {\n    pct = window.zoomMax;\n  }\n\n  document.querySelectorAll(\"body > *\").forEach(el => el.style.zoom = pct);\n  const FSBLHeader = document.querySelector(\"#FSBLHeader\");\n\n  if (FSBLHeader) {\n    FSBLHeader.style.zoom = 1;\n  }\n\n  if (!window.settingInitialZoom) showPopup(pct); // Zoom levels are saved as component state \"fsbl-zoom\"\n\n  FSBL.Clients.WindowClient.setComponentState({\n    field: \"fsbl-zoom\",\n    value: window.fsblZoomLevel\n  });\n};\n\nconst roundTo1Decimal = input => Math.round((input + Number.EPSILON) * 10) / 10;\n/**\n * Zooms the page in one step.\n */\n\n\nconst zoomIn = () => {\n  window.fsblZoomLevel = roundTo1Decimal(window.fsblZoomLevel + window.zoomStep);\n\n  if (window.fsblZoomLevel < window.zoomMin) {\n    window.fsblZoomLevel = window.zoomMin;\n  }\n\n  setZoom(window.fsblZoomLevel);\n};\n/**\n * Zooms the page out one step.\n */\n\n\nconst zoomOut = () => {\n  window.fsblZoomLevel = roundTo1Decimal(window.fsblZoomLevel - window.zoomStep);\n\n  if (window.fsblZoomLevel > window.zoomMax) {\n    window.fsblZoomLevel = window.zoomMax;\n  }\n\n  setZoom(window.fsblZoomLevel);\n};\n/**\n * Resets the zoom level to 100%.\n */\n\n\nconst resetZoom = () => {\n  window.fsblZoomLevel = 1;\n  setZoom(window.fsblZoomLevel);\n};\n\nconst handleWheel = event => {\n  const e = window.event || event; //if Control key was held down while scrolling mouse wheel interpret as zoom\n\n  if (e.ctrlKey) {\n    if (e.wheelDelta > 0) {\n      zoomIn();\n    } else if (e.wheelDelta < 0) {\n      zoomOut();\n    }\n\n    e.preventDefault();\n  }\n};\n/**\n * Inserts the pop up element into the page if needed.\n */\n\n\nconst insertPopUp = () => {\n  let popup = document.querySelector(\"#zoom-popup\");\n\n  if (popup) {\n    // Pop up already created.\n    return;\n  } // Create popup div, with ID, class and text\n\n\n  popup = document.createElement(\"div\");\n  popup.id = \"zoom-popup\";\n  popup.style.display = \"none\";\n  popup.style.position = \"absolute\";\n  popup.style.top = \"0px\";\n  popup.style.right = \"10px\";\n  popup.style.padding = \"5px\";\n  popup.style.background = \"grey\";\n  popup.style.color = \"white\";\n  popup.style.opacity = \"80%\";\n  const heading = document.createElement(\"div\");\n  heading.className = \"fsbl-zoom-popup-heading\";\n  heading.style.marginLeft = \"4px\";\n  heading.style.marginBottom = \"4px\";\n  popup.appendChild(heading);\n  const title = document.createElement(\"span\");\n  title.className = \"fsbl-zoom-popup-title\";\n  title.style.marginLeft = \"0px\";\n  title.appendChild(document.createTextNode(\"Zoom:\"));\n  heading.appendChild(title); // Create Div to contain the zoom level text\n\n  const span = document.createElement(\"span\");\n  span.className = \"fsbl-zoom-popup-text\";\n  span.style.marginLeft = \"3px\";\n  span.id = \"zoom-popup-text\";\n  heading.appendChild(span); // Create zoom out button\n\n  const zoomOutBtn = document.createElement(\"button\");\n  zoomOutBtn.style.width = \"unset\";\n  zoomOutBtn.style.padding = \"1px 5px 1px 5px\";\n  zoomOutBtn.style.margin = \"0px 2px 0px 2px\";\n  zoomOutBtn.appendChild(document.createTextNode(\"-\"));\n  zoomOutBtn.onclick = zoomOut;\n  popup.appendChild(zoomOutBtn); // Create reset button\n\n  const resetBtn = document.createElement(\"button\");\n  resetBtn.style.width = \"unset\";\n  resetBtn.style.padding = \"1px 5px 1px 5px\";\n  resetBtn.style.margin = \"0px 2px 0px 2px\";\n  resetBtn.appendChild(document.createTextNode(\"Reset\"));\n  resetBtn.onclick = resetZoom;\n  popup.appendChild(resetBtn); // Create zoom in button\n\n  const zoomInBtn = document.createElement(\"button\");\n  zoomInBtn.style.width = \"unset\";\n  zoomInBtn.style.padding = \"1px 5px 1px 5px\";\n  zoomInBtn.style.margin = \"0px 2px 0px 2px\";\n  zoomInBtn.appendChild(document.createTextNode(\"+\"));\n  zoomInBtn.onclick = zoomIn;\n  popup.appendChild(zoomInBtn);\n  document.body.appendChild(popup);\n};\n/**\n * Handles the zoom configuration.\n * @param {*} err The error getting zoom config, if one occurred.\n * @param {object} zoom The zoom configuration object\n * @param {Number} zoom.timeout The number of milliseconds the zoom pop up should be displayed before it is hidden (Default 3000).\n * @param {Number} zoom.step How much the zoom should increase or decrease when zooming in or out (Default 0.1).\n * @param {Number} zoom.max The maximum allowed zoom level (Default 5).\n * @param {Number} zoom.min The minimum allowed zoom level (Default 0.2).\n */\n\n\nconst zoomConfigHandler = (err, zoom) => {\n  if (err) {\n    return FSBL.Clients.Logger.error(err);\n  }\n\n  if (!zoom) {\n    // No config, use defaults.\n    return;\n  }\n\n  window.zoomTimeout = zoom.timeout ? zoom.timeout : window.zoomTimeout;\n  window.zoomStep = zoom.step ? zoom.step : window.zoomStep;\n  window.zoomMin = zoom.min ? zoom.min : window.zoomMin;\n  window.zoomMax = zoom.max ? zoom.max : window.zoomMax;\n};\n/**\n * Applies the zoom level from the component state or default configuration.\n *\n * @param {*} err The error, if one occurred, from getting the zoom level from component state.\n * @param {Number} zoomLevel The zoom level saved in the component.\n */\n\n\nconst getZoomLevelHandler = (err, zoomLevel) => {\n  if (err) {\n    FSBL.Clients.Logger.info('No \"fsbl-zoom\" settings found in component state', err);\n  } else if (zoomLevel != null) {\n    FSBL.Clients.Logger.info(`Retrieved zoomLevel from state: ${zoomLevel}`);\n    window.fsblZoomLevel = zoomLevel;\n    setZoom(window.fsblZoomLevel);\n  } else {\n    var _FSBL, _FSBL$Clients, _FSBL$Clients$WindowC, _FSBL$Clients$WindowC2, _FSBL$Clients$WindowC3, _FSBL$Clients$WindowC4, _FSBL$Clients$WindowC5, _FSBL$Clients$WindowC6;\n\n    //check for default configuration for zoom level and apply as needed\n    let defaultLevel = (_FSBL = FSBL) === null || _FSBL === void 0 ? void 0 : (_FSBL$Clients = _FSBL.Clients) === null || _FSBL$Clients === void 0 ? void 0 : (_FSBL$Clients$WindowC = _FSBL$Clients.WindowClient) === null || _FSBL$Clients$WindowC === void 0 ? void 0 : (_FSBL$Clients$WindowC2 = _FSBL$Clients$WindowC.options) === null || _FSBL$Clients$WindowC2 === void 0 ? void 0 : (_FSBL$Clients$WindowC3 = _FSBL$Clients$WindowC2.customData) === null || _FSBL$Clients$WindowC3 === void 0 ? void 0 : (_FSBL$Clients$WindowC4 = _FSBL$Clients$WindowC3.foreign) === null || _FSBL$Clients$WindowC4 === void 0 ? void 0 : (_FSBL$Clients$WindowC5 = _FSBL$Clients$WindowC4.components) === null || _FSBL$Clients$WindowC5 === void 0 ? void 0 : (_FSBL$Clients$WindowC6 = _FSBL$Clients$WindowC5[\"Window Manager\"]) === null || _FSBL$Clients$WindowC6 === void 0 ? void 0 : _FSBL$Clients$WindowC6.zoomDefault;\n\n    if (defaultLevel) {\n      FSBL.Clients.Logger.info(`Retrieved default zoom level from config: ${defaultLevel}`);\n      window.fsblZoomLevel = defaultLevel;\n      setZoom(defaultLevel);\n    } else {\n      FSBL.Clients.Logger.info(\"No default zoom level retrieved from configuration \");\n    }\n  }\n\n  window.settingInitialZoom = false;\n};\n/**\n * Initializes the zoom handler.\n */\n\n\nconst runZoomHandler = () => {\n  //Override FEA window zoom function to do nothing\n  //which prevents manual use of this function which conflicts with zoom preload\n  //N.B. window.options.accelerator.zoom setting is not affected by this and will still conflict with Zoom preload if set\n  FSBL.Clients.WindowClient.getCurrentWindow().setZoomLevel = function (level, callback, errorCallback) {\n    callback();\n  }; // Insert the zoom pop up, if needed.\n\n\n  insertPopUp(); // Update the zoom configuration.\n\n  FSBL.Clients.LauncherClient.getComponentDefaultConfig(FSBL.Clients.WindowClient.getWindowIdentifier().componentType, (err, componentConfig) => {\n    // Read component config for zoom\n    try {\n      const zoomConfig = componentConfig.foreign.components[\"Window Manager\"].zoom;\n\n      if (zoomConfig) {\n        return zoomConfigHandler(null, zoomConfig);\n      }\n    } catch (e) {// component config does not have foreign or foreign.components\n    } // If component doesn't have a config, read global config for zoom\n\n\n    FSBL.Clients.ConfigClient.getValue({\n      field: \"finsemble.Window Manager.zoom\"\n    }, zoomConfigHandler);\n  }); // Create hot keys for zooming.\n\n  FSBL.Clients.HotkeyClient.addBrowserHotkey([\"ctrl\", \"=\"], zoomIn); //TODO: enable when finsemble supports mapping + key\n\n  FSBL.Clients.HotkeyClient.addBrowserHotkey([\"ctrl\", \"+\"], zoomIn);\n  FSBL.Clients.HotkeyClient.addBrowserHotkey([\"ctrl\", \"-\"], zoomOut);\n  FSBL.Clients.HotkeyClient.addBrowserHotkey([\"ctrl\", \"0\"], resetZoom); // Updates the component with the zoom level from the previous load, if one exists.\n\n  FSBL.Clients.WindowClient.getComponentState({\n    field: \"fsbl-zoom\"\n  }, getZoomLevelHandler);\n  window.addEventListener(\"wheel\", handleWheel, {\n    capture: false,\n    passive: false\n  });\n}; // TODO, catch and recall scroll position\n// Startup pattern for preload. Preloads can come in any order, so we need to wait on either the window event or the\n// FSBL event\n\n\nif (window.FSBL && FSBL.addEventListener) {\n  FSBL.addEventListener(\"onReady\", runZoomHandler);\n} else {\n  window.addEventListener(\"FSBLReady\", runZoomHandler);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/preloads/zoom.js\n");

/***/ })

/******/ });